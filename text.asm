SECTION .data        ;для инициализированных данных

message db "Введите несколько символов:",0xa,0  ;message - адрес начала строки/массива
lm equ $-message                               ;lm - длина сообщения
                                                ;0xa - перенос строки, 0 - не обязателен, но может понадобиться при работе с C

n db 0xa                   ;переменная для переноса строки

SECTION .bss         ;для НЕинициализированных данных
enter: resb 10                              ;выделение памяти в 10 байт, где enter - адрес первого символа
lenter equ $-enter                            ;адрес с длиной сообщения

out: resb 10                              ;выделение памяти в 10 байт переменной out
lout equ $-out                            ;длина сообщения

;начало самой программы
SECTION .text
GLOBAL _start

    _start:

;действия для вывода содержимого по умолчанию с началом в ecx, с длиной edx - вывод вопроса
mov eax,4        ;эта строка №1 обязательна для вывода!
mov ebx,1        ;эта строка №2 обязательна для вывода!
mov ecx, message                                      ;в ecx помещается адрес первого символа строки 4202496
mov edx, lm                                           ;в edx помещается количество символов строки 53
int 0x80         ;эта строка №3 обязательна для вывода!

;после вывода строки в eax помещается адрес с ее кол-вом символов
;действия для ввода содержимого по умолчанию с началом в ecx, с длиной edx - ввод ответа
mov eax, 3       ;эта строка №1 обязательна для ввода!
mov ebx, 0       ;эта строка №2 обязательна для ввода!
mov ecx, enter                                      ;в ecx помещается адрес первого символа из enter 4202552
mov edx, lenter                                     ;в edx помещается количество символов enter 10
int 0x80        ;эта строка №3 обязательна для ввода!


                        ;BYTE 1 WORD 2 DWORD  4
                        ;mov ecx, enter+8      ;в ecx помещается адрес первого символа +8, т.е. 9 символа по счету
                        ;в ячейке памяти для resb содержится - 1 байт, т.е. 1 символ

                              ;отсюда начинается вывод данных:


   mov ecx,lenter         ;в счетчик ecx вставляю кол-во символов enter

   ;память enter и out уже выделена, но просто пустая
   ;помещаем номер ячейки памяти в регистры, соответственно размеру 1 байт

   mov ebx,enter          ;поместить адрес можно только в 4-байтный регистр, например ebx!
   add ebx,lenter         ;увеличить адрес на кол-во символов, чтобы получить последний элемент
   sub ebx,1              ;уменьшаем, так как если существует 10 ячеек с №№ 1 по 10, то 1 номеру + 10 длина получается несуществующая ячейка №11
   mov eax,out            ;поместить адрес можно только в 4-байтный регистр, например eax!





   again:                       ;метка начала цикла

   ;в eax и ebx уже находятся номера адресов enter и out, поэтому можно работать сразу с ними не трогая исходные enter и out
   mov dl,byte[ebx]           ;поместить содержимое по адресу ebx в 1-байтовый регистр dl
   mov byte [eax] ,dl           ;присвоить адрес следующего символа следующей ячейке памяти out из регистра dl

   dec ebx                     ;уменьшить регистр с адресом на 1
   inc eax                     ;увеличить регистр с адресом на 1




   loop again      ; количество повторений содержится в регистре ecx  9




;действия для вывода содержимого по умолчанию с началом в ecx, с длиной edx - вывод вопроса
mov eax,4        ;эта строка №1 обязательна для вывода!
mov ebx,1        ;эта строка №2 обязательна для вывода!
mov ecx, out      ;в ecx помещается адрес первого символа , т.е. последнего символа по счету

mov edx, lout            ;в edx помещается количество символов в переменной

int 0x80         ;эта строка №3 обязательна для вывода!





;действия для вывода содержимого по умолчанию с началом в ecx, с длиной edx - вывод вопроса
mov eax,4        ;эта строка №1 обязательна для вывода!
mov ebx,1        ;эта строка №2 обязательна для вывода!
mov ecx, n     ;в ecx помещается адрес первого символа , т.е. последнего символа по счету

mov edx, 1            ;в edx помещается количество символов в переменной

int 0x80         ;эта строка №3 обязательна для вывода!
                     ;здесь заканчивается вывод данных:




mov eax, 1          ;содержимое помещается в регистр в EAX помещается 1 - номер системного вызова "exit"
mov ebx, 0          ;содержимое помещается в регистр в EBX помещается 0 - параметр вызова "exit" означает код с которым завершится выполнение программы
int 0x80            ;системный вызов. После системного вызова "exit" выполнение программы завершается
