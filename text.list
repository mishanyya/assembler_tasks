     1                                  SECTION .data        ;для инициализированных данных
     2                                  
     3 00000000 0A                      n db 0xa                   ;переменная для переноса строки
     4                                  
     5                                  SECTION .bss         ;для НЕинициализированных данных
     6 00000000 <res 0000000A>          input: resb 10                              ;выделение памяти в 10 байт, где input- адрес первого символа
     7                                  linput equ $-input                           ;адрес с длиной сообщения
     8                                  
     9 0000000A <res 0000000A>          output: resb 10                              ;выделение памяти в 10 байт, где output - адрес первого символа
    10                                  loutput equ $-output                            ;адрес с длиной сообщения
    11                                  
    12                                  SECTION .text      ;начало кода самой программы
    13                                  
    14                                  ;подпрограммы
    15                                  ;вывод записи, использование стандартных обязательных данных
    16                                  PRINT:
    17 00000000 B804000000              mov eax,4
    18 00000005 BB01000000              mov ebx,1
    19 0000000A CD80                    int 80h
    20 0000000C C3                      ret
    21                                  
    22                                  ;ввод записи
    23                                  WRITE:
    24 0000000D B803000000              mov eax,3
    25 00000012 BB00000000              mov ebx,0
    26 00000017 CD80                    int 80h
    27 00000019 C3                      ret
    28                                  
    29                                  ;перевод символьной записи в десятичную запись
    30                                  ;число не может быть больше 256, т.е. трехзначное или меньше
    31                                  DECIMAL:
    32                                  
    33 0000001A 660FB60425-             movzx ax,[input] ;ввод символа - разные размеры word и byte, поэтому дополняем ax нулями
    33 0000001F [00000000]         
    34 00000023 B10A                    mov cl,10       ;делитель - на 10 или 0xa в 16-м формате
    35                                  
    36                                  ;делит значение word из ax на byte из cl и результат в виде byte
    37                                  ;целый результат - al
    38                                  ;остаток - ah
    39 00000025 F6F1                    div cl
    40                                  
    41 00000027 BD[0C000000]            mov ebp,output+2        ;ввод адреса последнего символа, так как вводим остаток с конца в регистр ebp
    42 0000002C 67886500                mov byte[ebp],ah        ;ввод остатка
    43 00000030 6780450030              add byte[ebp],'0'       ;чтобы вывести число из регистра, его надо перевести в символ путем добавления '0'
    44 00000035 FFCD                    dec ebp                 ;уменьшаем адрес
    45                                  
    46                                  ;разные размеры word и byte, поэтому дополняем ax нулями
    47 00000037 660FB6C0                movzx ax,al
    48                                  
    49 0000003B F6F1                    div cl
    50                                  
    51 0000003D 67886500                mov byte[ebp],ah        ;ввод остатка
    52 00000041 6780450030              add byte[ebp],'0'
    53 00000046 FFCD                    dec ebp
    54                                  
    55 00000048 67884500                mov byte[ebp],al        ;ввод целого
    56 0000004C 6780450030              add byte[ebp],'0'
    57 00000051 C3                      ret
    58                                  
    59                                  
    60                                  GLOBAL _start
    61                                      _start:
    62                                  
    63                                  ;отсюда начинается обработка и ввод данных:
    64                                  
    65                                  ;ввод символа q, его код в ANCII  113
    66 00000052 B9[00000000]            mov ecx,input        ;ввод адреса
    67 00000057 BA0A000000              mov edx,linput       ;ввод количества символов 1
    68 0000005C E8ACFFFFFF              call WRITE
    69                                  
    70 00000061 E8B4FFFFFF              call DECIMAL
    71                                  
    72                                  
    73                                  ;символ q его номер в ASCII 113
    74                                  ;символ \ его номер в ASCII 92
    75                                  ;символ В его номер в ASCII 66
    76                                  ;символ 5 его номер в ASCII 53
    77                                  ;символ } его номер в ASCII 125
    78                                  ;символ 8 его номер в ASCII 56
    79                                  
    80                                  ;вывод данных
    81 00000066 B9[0A000000]            mov ecx,output
    82 0000006B BA0A000000              mov edx,loutput
    83 00000070 E88BFFFFFF              call PRINT
    84                                  
    85                                  ;переход на новую строку
    86 00000075 B9[00000000]            mov ecx, n
    87 0000007A BA01000000              mov edx, 1
    88 0000007F E87CFFFFFF              call PRINT
    89                                  
    90                                                       ;здесь заканчивается вывод данных:
    91                                  
    92 00000084 B801000000              mov eax, 1          ;содержимое помещается в регистр в EAX помещается 1 - номер системного вызова "exit"
    93 00000089 BB00000000              mov ebx, 0          ;содержимое помещается в регистр в EBX помещается 0 - параметр вызова "exit" означает код с которым завершится выполнение программы
    94 0000008E CD80                    int 0x80            ;системный вызов. После системного вызова "exit" выполнение программы завершается
