     1                                  SECTION .data        ;для инициализированных данных
     2                                  
     3 00000000 D092D0B2D0B5D0B4D0-     message db "Введите несколько символов:",0xa,0  ;message - адрес начала строки/массива
     3 00000009 B8D182D0B520D0BDD0-
     3 00000012 B5D181D0BAD0BED0BB-
     3 0000001B D18CD0BAD0BE20D181-
     3 00000024 D0B8D0BCD0B2D0BED0-
     3 0000002D BBD0BED0B23A0A00   
     4                                  lm equ $-message                                ;lm - длина сообщения
     5                                                                                  ;0xa - перенос строки, 0 - не обязателен, но может понадобиться при работе с C
     6                                  
     7                                  
     8                                  SECTION .bss           ;для НЕинициализированных данных
     9 00000000 <res 0000000A>          enter: resb 10                              ;выделение памяти в 10 байт, где enter - адрес первого символа
    10                                  lenter equ $-enter                            ;адрес с длиной сообщения
    11                                  
    12 0000000A <res 0000000A>          out: resb 10                              ;выделение памяти в 10 байт переменной out
    13                                  lout equ $-out                            ;длина сообщения
    14                                  
    15                                  ;начало самой программы
    16                                  SECTION .text
    17                                  GLOBAL _start
    18                                  
    19                                      _start:
    20                                  
    21                                  ;действия для вывода содержимого по умолчанию с началом в ecx, с длиной edx - вывод вопроса
    22 00000000 B804000000              mov eax,4        ;эта строка №1 обязательна для вывода!
    23 00000005 BB01000000              mov ebx,1        ;эта строка №2 обязательна для вывода!
    24 0000000A B9[00000000]            mov ecx, message                                      ;в ecx помещается адрес первого символа строки 4202496
    25 0000000F BA35000000              mov edx, lm                                           ;в edx помещается количество символов строки 53
    26 00000014 CD80                    int 0x80         ;эта строка №3 обязательна для вывода!
    27                                  
    28                                  ;после вывода строки в eax помещается адрес с ее кол-вом символов
    29                                  ;действия для ввода содержимого по умолчанию с началом в ecx, с длиной edx - ввод ответа
    30 00000016 B803000000              mov eax, 3       ;эта строка №1 обязательна для ввода!
    31 0000001B BB00000000              mov ebx, 0       ;эта строка №2 обязательна для ввода!
    32 00000020 B9[00000000]            mov ecx, enter                                      ;в ecx помещается адрес первого символа из enter 4202552
    33 00000025 BA0A000000              mov edx, lenter                                     ;в edx помещается количество символов enter 10
    34 0000002A CD80                    int 0x80        ;эта строка №3 обязательна для ввода!
    35                                  
    36                                  
    37                                                          ;BYTE 1 WORD 2 DWORD  4
    38                                                          ;mov ecx, enter+8      ;в ecx помещается адрес первого символа +8, т.е. 9 символа по счету
    39                                                          ;в ячейке памяти для resb содержится - 1 байт, т.е. 1 символ
    40                                  
    41                                                                ;отсюда начинается вывод данных:
    42                                  
    43                                  
    44 0000002C B90A000000                 mov ecx,lenter         ;в счетчик ecx вставляю кол-во символов enter
    45                                  
    46                                     ;память enter и out уже выделена, но просто пустая
    47                                     ;помещаем номер ячейки памяти в регистры, соответственно размеру 1 байт
    48                                  
    49 00000031 BB[00000000]               mov ebx,enter          ;поместить адрес можно только в 4-байтный регистр, например ebx!
    50 00000036 83C30A                     add ebx,lenter         ;увеличить адрес на кол-во символов, чтобы получить последний элемент
    51 00000039 83EB01                     sub ebx,1              ;уменьшаем, так как если существует 10 ячеек с №№ 1 по 10, то 1 номеру + 10 длина получается несуществующая ячейка №11
    52 0000003C B8[0A000000]               mov eax,out            ;поместить адрес можно только в 4-байтный регистр, например eax!
    53                                  
    54                                  
    55                                  
    56                                  
    57                                  
    58                                     again:                       ;метка начала цикла
    59                                  
    60                                     ;в eax и ebx уже находятся номера адресов enter и out, поэтому можно работать сразу с ними не трогая исходные enter и out
    61 00000041 678A13                     mov dl,byte[ebx]           ;поместить содержимое по адресу ebx в 1-байтовый регистр dl
    62 00000044 678810                     mov byte [eax] ,dl           ;присвоить адрес следующего символа следующей ячейке памяти out из регистра dl
    63                                  
    64 00000047 FFCB                       dec ebx                     ;уменьшить регистр с адресом на 1
    65 00000049 FFC0                       inc eax                     ;увеличить регистр с адресом на 1
    66                                  
    67                                  
    68                                  
    69                                  
    70 0000004B E2F4                       loop again      ; количество повторений содержится в регистре ecx  9
    71                                  
    72                                  
    73                                  
    74                                  
    75                                  ;действия для вывода содержимого по умолчанию с началом в ecx, с длиной edx - вывод вопроса
    76 0000004D B804000000              mov eax,4        ;эта строка №1 обязательна для вывода!
    77 00000052 BB01000000              mov ebx,1        ;эта строка №2 обязательна для вывода!
    78 00000057 B9[0A000000]            mov ecx, out      ;в ecx помещается адрес первого символа , т.е. последнего символа по счету
    79 0000005C BA0A000000              mov edx, lout            ;в edx помещается количество символов в переменной
    80 00000061 CD80                    int 0x80         ;эта строка №3 обязательна для вывода!
    81                                  
    82                                                       ;здесь заканчивается вывод данных:
    83                                  
    84                                  
    85                                  
    86                                  
    87 00000063 B801000000              mov eax, 1          ;содержимое помещается в регистр в EAX помещается 1 - номер системного вызова "exit"
    88 00000068 BB00000000              mov ebx, 0          ;содержимое помещается в регистр в EBX помещается 0 - параметр вызова "exit" означает код с которым завершится выполнение программы
    89 0000006D CD80                    int 0x80            ;системный вызов. После системного вызова "exit" выполнение программы завершается
